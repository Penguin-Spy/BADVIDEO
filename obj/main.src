; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name:    Bad Apple for the TI-84+ CE
;    4	 * Author:          Penguin_Spy
;    5	 * License:         Use, but don't steal my code thx; the original video is by あにら (https://www.nicovideo.jp/watch/sm8628149); original music is by colors (https://www.nicovideo.jp/watch/sm2077177)
;    6	 * Description:     Renders a series of frames stored as the length between each color flip, sorta like gen 1 pokemon sprites (i think).
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	
;   11	
;   12	/* Includes */
;   13	#include <string.h>
;   14	#include <tice.h>
;   15	#include <graphx.h>
;   16	#include <fileioc.h>
;   17	
;   18	
;   19	
;   20	
;   21	
;   22	
;   23	
;   24	
;   25	int main(void)
;   26	{
_main:
	LD	HL,-381
	CALL	__frameset
;   27	    
;   28	    //uint8_t frame[] = {255,255,255,255,255,190,4,255,59,8,255,57,8,255,56,10,255,55,10,255,55,10,255,55,10,255,56,8,255,57,8,255,59,4,255,255,255,25,4,255,59,8,255,57,8,255,56,10,255,55,10,255,55,10,255,55,10,255,56,8,255,57,8,255,59,4,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,20,4,255,59,8,255,56,9,255,55,11,255,53,12,255,53,12,255,52,13,255,51,13,255,51,14,84,4,217,14,83,8,214,15,83,8,213,14,84,10,211,15,84,10,210,15,85,10,209,15,86,10,208,15,87,10,207,15,88,10,206,15,89,11,204,15,90,11,204,14,91,12,202,14,93,12,200,14,94,12,199,14,96,12,197,14,97,13,195,14,99,13,193,14,100,14,191,15,101,14,189,15,103,14,187,15,104,16,184,15,106,16,182,15,108,16,180,15,110,16,179,14,112,16,177,14,114,17,174,14,116,17,172,14,118,17,170,14,121,16,168,14,123,17,165,14,125,17,163,15,126,17,161,15,128,18,158,15,131,17,156,15,133,17,154,15,135,18,152,14,137,18,150,14,140,17,148,14,142,18,145,14,144,18,143,14,147,18,140,14,149,18,138,14,151,19,135,15,153,18,133,15,155,19,130,15,157,19,128,15,160,19,124,16,162,20,121,16,165,19,119,16,167,20,116,16,170,20,113,16,172,21,109,17,175,21,106,17,177,22,102,18,180,22,99,17,184,23,94,18,186,25,90,18,189,25,86,19,192,26,81,20,195,26,77,20,199,27,73,20,202,28,67,21,206,29,61,23,209,30,56,23,213,32,49,25,217,34,41,26,222,36,32,28,226,43,18,31,231,88,234,84,239,79,244,73,250,67,255,1,62,255,7,55,255,15,47,255,23,38,255,36,24,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255};
;   29	    //uint8_t len = sizeof(frame);
;   30	    
;   31	    char names[][10] = {"_______0", "_______1", "_______2", "_______3", "_______4", "_______5", "_______6", "_______7", "_______8", "_______9"};
	LEA	DE,IX+-126
	LD	HL,_0temp0
	LD	BC,100
	LDIR	
;   32	    
;   33	    ti_var_t LLV_FILE;
;   34	    uint16_t LLV_SIZE;
;   35	    uint8_t frame[255];
;   36	    uint8_t line = 0;
;   37	    
;   38	    uint16_t i;
;   39	    int x = 0;
;   40	    uint8_t y = 0;
;   41	    uint8_t VERT_SCALE = 1;
;   42	    uint8_t key = 0;
;   43	    uint8_t color = 0;
;   44	    uint8_t tempColor = 0;
	LD	(IX+-11),0
;   45	    char *var_name;
;   46	    uint8_t *search_pos = NULL;
	LD	BC,0
	LD	(IX+-26),BC
;   47	    uint8_t numFound = 0;
	LD	(IX+-4),0
;   48	    
;   49	    
;   50	    
;   51	    // Close any files that may be open already
;   52	    ti_CloseAll();
	CALL	_ti_CloseAll
;   53	    
;   54	    
;   55	    
;   56	    
;   57	    
;   58	    
;   59	    
;   60	    
;   61	    gfx_Begin();            // Initalize graphics
	CALL	_gfx_Begin
;   62	    //gfx_SetDrawBuffer();    // Enable buffering (because the screen is fully redrawn each frame)
;   63	    
;   64	    gfx_SetColor(0xFF);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   65	    gfx_FillScreen(74);
	LD	BC,74
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   66	    
;   67	    // Pick file
;   68	    while((var_name = ti_DetectVar(&search_pos, "LLV", TI_APPVAR_TYPE)) != NULL) {
	JR	L_3
L_4:
;   69	        strcpy(names[numFound], var_name);
	LD	BC,(IX+-21)
	PUSH	BC
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	LD	A,10
	CALL	__imul_b
	LD	BC,HL
	LEA	HL,IX+-126
	ADD	HL,BC
	PUSH	HL
	CALL	_strcpy
	POP	BC
	POP	BC
;   70	        numFound++;
	INC	(IX+-4)
;   71	        if(numFound > 10) break;
	LD	A,10
	CP	A,(IX+-4)
	JR	C,L_5
;   72	    }
L_3:
	LD	BC,21
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	PEA	IX+-26
	CALL	_ti_DetectVar
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-21),HL
	CALL	__icmpzero
	JR	NZ,L_4
;   73	    
;   74	    
;   75	select:
L_5:
;   76	    gfx_SetColor(0xFF);     // Setup color swapping
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   77	        
;   78	    gfx_FillScreen(74);
	LD	BC,74
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   79	    for(i = 0; i < numFound; i++) {
	LD	(IX+-2),0
	LD	(IX+-1),0
	JR	L_10
L_8:
;   80	        gfx_SetTextXY(10, i*8);
	LD	BC,(IX+-2)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	BC,10
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   81	        gfx_PrintString(names[i]);
	LD	BC,(IX+-2)
	CALL	__stoiu
	LD	A,10
	CALL	__imul_b
	LD	BC,HL
	LEA	HL,IX+-126
	ADD	HL,BC
	PUSH	HL
	CALL	_gfx_PrintString
	POP	BC
	LD	HL,(IX+-2)
	INC	HL
	LD	(IX+-2),L
	LD	(IX+-1),H
;   82	    }
L_10:
	LD	C,(IX+-4)
	LD	B,0
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_8
;   83	    
;   84	    key = 0;
	LD	(IX+-3),0
;   85	    i = 0;
	LD	(IX+-2),0
	LD	(IX+-1),0
;   86	    while(key != sk_Enter && key != sk_Clear) {
	JR	L_24
L_25:
;   87	        switch(key) {
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	CALL	__case8
L__4:
	DW	2
	DB	1
	DW24	L_17	

	DB	4
	DW24	L_13	

	DW24	L_21	

;   88	            case sk_Up:
L_13:
;   89	                if(i > 0) i--;
	LD	BC,(IX+-2)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_21
	LD	IY,(IX+-2)
	LEA	HL,IY+-1
	LD	(IX+-2),L
	LD	(IX+-1),H
;   90	                break;
	JR	L_21
;   91	            case sk_Down:
L_17:
;   92	                if(i < numFound-1) i++;
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	DEC	DE
	LD	BC,(IX+-2)
	CALL	__stoiu
	OR	A,A
	SBC	HL,DE
	CALL	__setflag
	JP	P,L_21
	LD	HL,(IX+-2)
	INC	HL
	LD	(IX+-2),L
	LD	(IX+-1),H
;   93	                break;
;   94	            // mode for more info?
;   95	        }
L_21:
;   96	        
;   97	        // Draw selection carrot
;   98	        tempColor = gfx_SetColor(74);
	LD	BC,74
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
	LD	(IX+-11),A
;   99	        gfx_FillRectangle(0, 0, 10, 8*numFound);
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  100	        gfx_SetColor(tempColor);
	LD	C,(IX+-11)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  101	        gfx_SetTextXY(0, i*8);
	LD	BC,(IX+-2)
	CALL	__stoiu
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  102	        gfx_PrintString(">");
	LD	BC,L__7
	PUSH	BC
	CALL	_gfx_PrintString
	POP	BC
;  103	        
;  104	        while(!(key = os_GetCSC()));
L_23:
	CALL	_os_GetCSC
	LD	(IX+-3),A
	OR	A,A
	JR	Z,L_23
;  105	    }
L_24:
	LD	A,(IX+-3)
	CP	A,9
	JR	Z,L_27
	LD	A,(IX+-3)
	CP	A,15
	JR	NZ,L_25
L_27:
;  106	    
;  107	    if(key == sk_Clear) {
	LD	A,(IX+-3)
	CP	A,15
	JR	NZ,L_28
;  108	        gfx_End();              // End graphics drawing
	CALL	_gfx_End
	OR	A,A
;  109	        return 0;
	SBC	HL,HL
	JR	L_45
;  110	    }
L_28:
;  111	    
;  112	
;  113	    // Open the selected file.
;  114	    LLV_FILE = ti_Open(names[i], "r");
	LD	BC,L__12
	PUSH	BC
	LD	BC,(IX+-2)
	CALL	__stoiu
	LD	A,10
	CALL	__imul_b
	LD	BC,HL
	LEA	HL,IX+-126
	ADD	HL,BC
	PUSH	HL
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-10),A
;  115	    
;  116	    //ti_Read(&frame, 1, sizeof(frame), LLV_FILE);
;  117	    
;  118	    LLV_SIZE = ti_GetSize(LLV_FILE);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetSize
	POP	BC
	LD	(IX+-23),L
	LD	(IX+-22),H
;  119	    
;  120	    
;  121	    while(key != sk_Clear) {
	JR	L_42
L_43:
;  122	        
;  123	        // draw (320x240)
;  124	        x = 0;
	LD	BC,0
	LD	(IX+-9),BC
;  125	        y = 0;
	LD	(IX+-6),0
;  126	        color = 0;
	LD	(IX+-12),0
;  127	        gfx_SetColor(0xFF);     // Setup color swapping
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  128	        
;  129	        gfx_FillScreen(74);
	LD	BC,74
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  130	        
;  131	        
;  132	        ti_Seek(3, SEEK_SET, LLV_FILE);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,3
	PUSH	BC
	CALL	_ti_Seek
	POP	BC
	POP	BC
	POP	BC
;  133	        
;  134	        for (i = 0; i < LLV_SIZE; i++) {
	LD	(IX+-2),0
	LD	(IX+-1),0
	JR	L_36
L_34:
;  135	            int remainingWidth = LCD_WIDTH - x;
	LD	HL,320
	LD	BC,(IX+-9)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-15),HL
;  136	            
;  137	            ti_Read(&frame, 1, 1, LLV_FILE);
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	LD	HL,IX
	LD	BC,-381
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_ti_Read
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  138	            
;  139	            //line = frame[i];
;  140	            line = frame[0];
	LD	BC,-381
	CALL	__bldix
	LD	(IX+-5),A
;  141	            
;  142	            if(remainingWidth < line) {
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-15)
	OR	A,A
	SBC	HL,BC
	JP	P,L_31
;  143	                // line for remainingWidth
;  144	                gfx_FillRectangle(x, y, remainingWidth, VERT_SCALE);
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-15)
	PUSH	BC
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  145	                
;  146	                // line for line - remainingWidth on next line
;  147	                gfx_FillRectangle(0, y + VERT_SCALE, line - remainingWidth, VERT_SCALE);
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,(IX+-15)
	SBC	HL,BC
	LD	(IX+-18),HL
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-18)
	PUSH	BC
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	INC	HL
	PUSH	HL
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  148	                
;  149	                // loop x and +1 to y
;  150	                x = line - remainingWidth;
	LD	BC,(IX+-18)
	LD	(IX+-9),BC
;  151	                y += VERT_SCALE;
	INC	(IX+-6)
;  152	            } else {
	JR	L_33
L_31:
;  153	                // line for line
;  154	                gfx_FillRectangle(x, y, line, VERT_SCALE);
	LD	BC,1
	PUSH	BC
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  155	                // increase x offset by length of line
;  156	                x += line;
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-9),HL
;  157	            }
L_33:
;  158	            
;  159	            if(line != 255) {   // Swap color, unless line length was exactly 255 (0xFF). This is to allow contiguous sections of the same color longer than 255.
	LD	A,(IX+-5)
	CP	A,255
	JR	Z,L_35
;  160	                color = gfx_SetColor(color);    // To display a line of length 255, encode it as a 255 length line (0xFF) followed by a 0 length line (0xFF).
	LD	C,(IX+-12)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
	LD	(IX+-12),A
;  161	            }
;  162	            
;  163	            
;  164	            // DEBUG: debug var display
;  165	            /*tempColor = gfx_SetColor(74);
;  166	            gfx_FillRectangle(0, 200, LCD_WIDTH, 40);
;  167	            gfx_SetTextXY(0, 200);
;  168	            gfx_PrintUInt(x, 8);
;  169	            gfx_SetTextXY(0, 208);
;  170	            gfx_PrintUInt(y, 8);
;  171	            gfx_SetTextXY(0, 216);
;  172	            gfx_PrintUInt(line, 8);
;  173	            gfx_SetTextXY(0, 224);
;  174	            gfx_PrintUInt(i, 8);
;  175	            gfx_SetTextXY(0, 232);
;  176	            gfx_PrintInt(LLV_SIZE, 8);
;  177	            gfx_SetColor(tempColor);*/
;  178	            
;  179	            
;  180	        }
L_35:
	LD	HL,(IX+-2)
	INC	HL
	LD	(IX+-2),L
	LD	(IX+-1),H
L_36:
	LD	BC,(IX+-23)
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	C,L_34
;  181	        
;  182	        while(!(key = os_GetCSC()));    // DEBUG: wait for keypress
L_38:
	CALL	_os_GetCSC
	LD	(IX+-3),A
	OR	A,A
	JR	Z,L_38
;  183	        if(key == sk_Clear) break;      // DEBUG: quit on clear pressed
	LD	A,(IX+-3)
	CP	A,15
	JR	Z,L_5
;  184	        //gfx_SwapDraw();
;  185	    }
L_42:
	LD	A,(IX+-3)
	CP	A,15
	JR	NZ,L_43
;  186	    
;  187	    key = 0;
;  188	    goto select;
	JR	L_5
L_45:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_ti_Read                            IMPORT  -----   function
;_ti_Seek                            IMPORT  -----   function
;_ti_GetSize                         IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_FillRectangle                  IMPORT  -----   function
;_gfx_PrintString                    IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_ti_DetectVar                       IMPORT  -----   function
;_strcpy                             IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_0temp0                             STATIC    100   variable
;frame                               IX-381    255   variable
;names                               IX-126    100   variable
;search_pos                           IX-26      3   variable
;LLV_SIZE                             IX-23      2   variable
;var_name                             IX-21      3   variable
;G_0                                  IX-18      3   variable
;remainingWidth                       IX-15      3   variable
;color                                IX-12      1   variable
;tempColor                            IX-11      1   variable
;LLV_FILE                             IX-10      1   variable
;x                                     IX-9      3   variable
;y                                     IX-6      1   variable
;line                                  IX-5      1   variable
;numFound                              IX-4      1   variable
;key                                   IX-3      1   variable
;i                                     IX-2      2   variable


; Stack Frame Size: 387 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"LLV"
	DB	0
L__7:
	DB	">"
	DB	0
L__12:
	DB	"r"
	DB	0
	SEGMENT TEXT
_0temp0:
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	48
	DB	0
	DB	0
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	49
	DB	0
	DB	0
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	50
	DB	0
	DB	0
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	51
	DB	0
	DB	0
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	52
	DB	0
	DB	0
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	53
	DB	0
	DB	0
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	54
	DB	0
	DB	0
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	55
	DB	0
	DB	0
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	56
	DB	0
	DB	0
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	95
	DB	57
	DB	0
	DB	0
	XREF _ti_GetSize:ROM
	XREF _ti_Seek:ROM
	XREF _ti_Read:ROM
	XREF _ti_DetectVar:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintString:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _os_GetCSC:ROM
	XREF _strcpy:ROM
	XREF __stoiu:ROM
	XREF __bldix:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF _main
	END
