


uint24_t    hl_save;
uint16_t    x;


decodeVertical:

// init (check line length & stuff)

// load _line into b
    ld      b, (IX+d)   // line
    // if b == 0, cancel
    xor     a, a
    or      a, b
    jr      z, .end

// load _color into a
    ld      a,  (IX+d)  // color
// load 320 (offset to next pixel row) into c
    ld      c, 320/2

// load _hl_save into HL
    ld      hl, (IX+d)  // hl_save
    
    jr      .start

.rewind:
    ld      de, 76799
    sbc     hl, de
    inc     (IX+d)      // increment X

.start:
// Calculate the "out of bounds address" that hl would encounter
    push    hl          // pushed & popped because of instruction/register restrictions
    ld      hl, 0xD65800
    ld      de, (IX+d)  // load x
    add     hl, de      // add x
    ld      de, hl
    pop     hl

.loop:
    ld      (hl),a
    add     hl, c
    add     hl, c
    // compare hl to previously calculated "out of bounds address"
    push    hl
    sbc     hl, de
    pop     hl
    jr      z,  .rewind // If hl == de (oob address), jump back up to rewind
    djnz    .loop




// cleanup
    // save hl into hl_save
    ld      (IX+d), hl  // hl_save
.end:






















LD      bc, 0x000000        // zero out BCU
LD      C, (IX+-24) // line // Load line length into C
loop:
                // Check if line == 0, if so exit loop
XOR     A, A                // Clear the Accumulator
OR      A, C                // Is line == 0 ?
JR      Z, exitLoop_V       // Jump past this code



                // Copy color to screen & go to next line
LD      HL, (IX+-38) // x   // Load the vRam offset into HL (saved in uint8_t x's memory location because simple)
LD      A, (IX+-18) //color // Color
LD      (HL), A
LD      DE, 320             // Screen Width of one line(to go to the pixel below HL)
ADD     HL, DE


                // If we've gone past vRam, rewind back to the top row, 1 column right
LD      DE, 0xD56801        // End of vRam + 1 (so that we only need one conditional jump)
PUSH    HL                  // Save HL b4 we subtract
SBC     HL, DE
POP     HL                  // Load HL back here (before jump because stack leak no good)
JR      M, skipRewind

                // Rewind back to the top row, 1 column right
LD      DE, 76799
SBC     HL, DE              // vRam size - 1, to rewind to the top of the next column

skipRewind:
LD    (IX+-38), HL // x     // Save hl to x
DEC     BC                  // Decrement the number of pixels left in this line
JR      loop                // Loop

exitLoop_V: